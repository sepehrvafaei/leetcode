"""In a binary tree, the root node is at depth 0, and children of each depth k node are at depth k+1.

Two nodes of a binary tree are cousins if they have the same depth, but have different parents.

We are given the root of a binary tree with unique values, and the values x and y of two different nodes in the tree.

Return true if and only if the nodes corresponding to the values x and y are cousins.
Note:

The number of nodes in the tree will be between 2 and 100.
Each node has a unique integer value from 1 to 100.
"""
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
import math
d_x=0
d_y=0
p_x=None
p_y=None
class Solution:
    def isCousins(self, root: TreeNode, x: int, y: int) -> bool:      
        def found(r,d_r,p_r,x,y,f_x,f_y):
            if r==None:
                return
            if f_x and f_y:
                return
            if r.val==x:
                f_x=True
                global p_x
                p_x=p_r
                global d_x
                d_x=d_r
            elif r.val==y:
                f_y=True
                global p_y
                p_y=p_r
                global d_y
                d_y=d_r
            found(r.left,d_r+1,r,x,y,f_x,f_y)
            found(r.right,d_r+1,r,x,y,f_x,f_y)
        found(root,0,root,x,y,False,False)
        if d_x==d_y and p_x.val!=p_y.val:
            return True
        else:
            return False
